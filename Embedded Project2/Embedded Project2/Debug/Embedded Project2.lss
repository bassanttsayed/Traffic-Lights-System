
Embedded Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000cf2  00000d86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080007c  0080007c  00000da2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001520  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000944  00000000  00000000  000024bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b42  00000000  00000000  00002e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00003944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049c  00000000  00000000  00003bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ea  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004a72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 96 01 	call	0x32c	; 0x32c <main>
  8a:	0c 94 77 06 	jmp	0xcee	; 0xcee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <appInitilization>:
uint8_t buttonClick =0;
uint8_t blinkCheck =0;
void appInitilization(void)
{
	/******Setting Pedestrian LEDS*******/
	ledInitilization(PortB,0);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	82 e4       	ldi	r24, 0x42	; 66
  96:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ledInitilization>
	ledInitilization(PortB,1);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	82 e4       	ldi	r24, 0x42	; 66
  9e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ledInitilization>
	ledInitilization(PortB,2);
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	82 e4       	ldi	r24, 0x42	; 66
  a6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ledInitilization>
	
	
	
	 ledInitilization(PortD,7);
  aa:	67 e0       	ldi	r22, 0x07	; 7
  ac:	84 e4       	ldi	r24, 0x44	; 68
  ae:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ledInitilization>
	 ledInitilization(PortC,0);
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	83 e4       	ldi	r24, 0x43	; 67
  b6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ledInitilization>
	 ledInitilization(PortC,2);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	83 e4       	ldi	r24, 0x43	; 67
  be:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ledInitilization>
	 
	/*****Setting Cars LEDS********/
	
	ledInitilization(PortA,0);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	81 e4       	ldi	r24, 0x41	; 65
  c6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ledInitilization>
	ledInitilization(PortA,1);
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	81 e4       	ldi	r24, 0x41	; 65
  ce:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ledInitilization>
	ledInitilization(PortA,2);
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	81 e4       	ldi	r24, 0x41	; 65
  d6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ledInitilization>
	
	/*****Setting the Push Button for Pedestrian*****/
	buttonInitilization(PortD,2);
  da:	62 e0       	ldi	r22, 0x02	; 2
  dc:	84 e4       	ldi	r24, 0x44	; 68
  de:	0e 94 74 01 	call	0x2e8	; 0x2e8 <buttonInitilization>
	
	/****Setting the timer*****/
	timerInitialization();
  e2:	0e 94 88 03 	call	0x710	; 0x710 <timerInitialization>
	timerStart();
  e6:	0e 94 84 03 	call	0x708	; 0x708 <timerStart>
 
		
	/****Setting the interrupt*****/
	INT0_init();
  ea:	0e 94 70 03 	call	0x6e0	; 0x6e0 <INT0_init>
  ee:	08 95       	ret

000000f0 <BlinkLED>:
	ledOn(PortA,0);
	
	//appStart();
	
}
void BlinkLED(){
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
	blinkCheck=1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
	for (int i=0; i<5; i++){
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	0b c0       	rjmp	.+22     	; 0x116 <BlinkLED+0x26>
		ledToggle(PortB,1);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	82 e4       	ldi	r24, 0x42	; 66
 104:	0e 94 84 01 	call	0x308	; 0x308 <ledToggle>
		ledToggle(PortA,1);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	81 e4       	ldi	r24, 0x41	; 65
 10c:	0e 94 84 01 	call	0x308	; 0x308 <ledToggle>
		timerDelayBlink();
 110:	0e 94 8d 03 	call	0x71a	; 0x71a <timerDelayBlink>
	//appStart();
	
}
void BlinkLED(){
	blinkCheck=1;
	for (int i=0; i<5; i++){
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	c5 30       	cpi	r28, 0x05	; 5
 118:	d1 05       	cpc	r29, r1
 11a:	94 f3       	brlt	.-28     	; 0x100 <BlinkLED+0x10>
		ledToggle(PortB,1);
		ledToggle(PortA,1);
		timerDelayBlink();
	}
	
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <appStart>:
	
}
void appStart(void){
	//if(buttonClick==0)
	//{
	ledOff(PortC,2);
 122:	62 e0       	ldi	r22, 0x02	; 2
 124:	83 e4       	ldi	r24, 0x43	; 67
 126:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
	ledOff(PortD,7);
 12a:	67 e0       	ldi	r22, 0x07	; 7
 12c:	84 e4       	ldi	r24, 0x44	; 68
 12e:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
	ledOn(PortC,0);
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	83 e4       	ldi	r24, 0x43	; 67
 136:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
	ledOn(PortA,0);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	81 e4       	ldi	r24, 0x41	; 65
 13e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
	ledOn(PortB,2);
 142:	62 e0       	ldi	r22, 0x02	; 2
 144:	82 e4       	ldi	r24, 0x42	; 66
 146:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
	timerDelay();
 14a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <timerDelay>
	ledOff(PortA,0);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	81 e4       	ldi	r24, 0x41	; 65
 152:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
	ledOff(PortB,2);
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	82 e4       	ldi	r24, 0x42	; 66
 15a:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
	//ledOn(PortA,1);
	BlinkLED();
 15e:	0e 94 78 00 	call	0xf0	; 0xf0 <BlinkLED>
	//ledOn(PortB,1);
	ledOff(PortA,1);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	81 e4       	ldi	r24, 0x41	; 65
 166:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
	ledOff(PortB,1);
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	82 e4       	ldi	r24, 0x42	; 66
 16e:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
	blinkCheck=0;
 172:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
	ledOn(PortA,2);
 176:	62 e0       	ldi	r22, 0x02	; 2
 178:	81 e4       	ldi	r24, 0x41	; 65
 17a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
	ledOn(PortB,0);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	82 e4       	ldi	r24, 0x42	; 66
 182:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
	timerDelay();
 186:	0e 94 78 03 	call	0x6f0	; 0x6f0 <timerDelay>
	ledOff(PortA,2);
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	81 e4       	ldi	r24, 0x41	; 65
 18e:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
	ledOff(PortB,0);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	82 e4       	ldi	r24, 0x42	; 66
 196:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
	BlinkLED();
 19a:	0e 94 78 00 	call	0xf0	; 0xf0 <BlinkLED>
	ledOff(PortA,1);
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	81 e4       	ldi	r24, 0x41	; 65
 1a2:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
	ledOff(PortB,1);
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	82 e4       	ldi	r24, 0x42	; 66
 1aa:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
	blinkCheck=0;
 1ae:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
 1b2:	08 95       	ret

000001b4 <pedistrianMode>:
		
	//}
}
void pedistrianMode(){
	//isLedOn(PortA,2)==1
	if(isLedOn(PortA,2)==1)
 1b4:	62 e0       	ldi	r22, 0x02	; 2
 1b6:	81 e4       	ldi	r24, 0x41	; 65
 1b8:	0e 94 87 01 	call	0x30e	; 0x30e <isLedOn>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	89 f4       	brne	.+34     	; 0x1e2 <pedistrianMode+0x2e>
	{
		//ledOn()
		ledOn(PortD,7);
 1c0:	67 e0       	ldi	r22, 0x07	; 7
 1c2:	84 e4       	ldi	r24, 0x44	; 68
 1c4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
		ledOn(PortA,2);
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	81 e4       	ldi	r24, 0x41	; 65
 1cc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
		ledOn(PortB,0);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	82 e4       	ldi	r24, 0x42	; 66
 1d4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
		timerDelay();
 1d8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <timerDelay>
		//	ledOff(PortA,2);
		//	ledOff(PortB,0);
		buttonClick=0;
 1dc:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <buttonClick>
 1e0:	3e c0       	rjmp	.+124    	; 0x25e <pedistrianMode+0xaa>
	}
	else if((isLedOn(PortA,0)==1) || (blinkCheck==1))
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	81 e4       	ldi	r24, 0x41	; 65
 1e6:	0e 94 87 01 	call	0x30e	; 0x30e <isLedOn>
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	21 f0       	breq	.+8      	; 0x1f6 <pedistrianMode+0x42>
 1ee:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	a1 f5       	brne	.+104    	; 0x25e <pedistrianMode+0xaa>
	{
		ledOn(PortC,2);
 1f6:	62 e0       	ldi	r22, 0x02	; 2
 1f8:	83 e4       	ldi	r24, 0x43	; 67
 1fa:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
		ledOff(PortC,0);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	83 e4       	ldi	r24, 0x43	; 67
 202:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
		//ledOff(PortD,7);
		ledOff(PortA,0);
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	81 e4       	ldi	r24, 0x41	; 65
 20a:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
		ledOn(PortB,2);
 20e:	62 e0       	ldi	r22, 0x02	; 2
 210:	82 e4       	ldi	r24, 0x42	; 66
 212:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
		//ledOn(PortA,1);
		//ledOn(PortB,1);
		BlinkLED();
 216:	0e 94 78 00 	call	0xf0	; 0xf0 <BlinkLED>
		//timerDelay();
		ledOff(PortA,1);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	81 e4       	ldi	r24, 0x41	; 65
 21e:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
		ledOff(PortB,1);
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	82 e4       	ldi	r24, 0x42	; 66
 226:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
		blinkCheck=0;
 22a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
		ledOff(PortB,2);
 22e:	62 e0       	ldi	r22, 0x02	; 2
 230:	82 e4       	ldi	r24, 0x42	; 66
 232:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
		ledOn(PortA,2);
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	81 e4       	ldi	r24, 0x41	; 65
 23a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
		ledOn(PortB,0);
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	82 e4       	ldi	r24, 0x42	; 66
 242:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
		timerDelay();
 246:	0e 94 78 03 	call	0x6f0	; 0x6f0 <timerDelay>
		ledOff(PortA,2);
 24a:	62 e0       	ldi	r22, 0x02	; 2
 24c:	81 e4       	ldi	r24, 0x41	; 65
 24e:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
		ledOff(PortB,0);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	82 e4       	ldi	r24, 0x42	; 66
 256:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
		buttonClick=0;
 25a:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <buttonClick>
	}
	ledOff(PortA,2);
 25e:	62 e0       	ldi	r22, 0x02	; 2
 260:	81 e4       	ldi	r24, 0x41	; 65
 262:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
	//ledOn(PortA,1);
	//ledOn(PortB,1);
	ledOn(PortB,0);
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	82 e4       	ldi	r24, 0x42	; 66
 26a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
	BlinkLED();
 26e:	0e 94 78 00 	call	0xf0	; 0xf0 <BlinkLED>
	// xxxx ledOn(PortB,0);
	//timerDelay();
	ledOff(PortB,0);
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	82 e4       	ldi	r24, 0x42	; 66
 276:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
	ledOff(PortA,1);
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	81 e4       	ldi	r24, 0x41	; 65
 27e:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
	ledOff(PortB,1);
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	82 e4       	ldi	r24, 0x42	; 66
 286:	0e 94 80 01 	call	0x300	; 0x300 <ledOff>
	blinkCheck=0;
 28a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
	ledOn(PortB,2);
 28e:	62 e0       	ldi	r22, 0x02	; 2
 290:	82 e4       	ldi	r24, 0x42	; 66
 292:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
	ledOn(PortA,0);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	81 e4       	ldi	r24, 0x41	; 65
 29a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ledOn>
 29e:	08 95       	ret

000002a0 <__vector_1>:
		ledToggle(PortA,1);
		timerDelayBlink();
	}
	
}
ISR(INT0_vect){
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
	pedistrianMode();
 2c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <pedistrianMode>
	//buttonClick=1;
	
}
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <buttonInitilization>:
 *  Author: agh
 */ 
#include "button.h"

void buttonInitilization (uint8_t portNum, uint8_t pinNum){
	GPIO_init(portNum,pinNum,IN);
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	0e 94 9b 01 	call	0x336	; 0x336 <GPIO_init>
 2ee:	08 95       	ret

000002f0 <ledInitilization>:
 */ 
#include "led.h"

void ledInitilization (uint8_t portNum, uint8_t pinNum){
	
	GPIO_init(portNum,pinNum,OUT);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	0e 94 9b 01 	call	0x336	; 0x336 <GPIO_init>
 2f6:	08 95       	ret

000002f8 <ledOn>:
}
void ledOn (uint8_t portNum, uint8_t pinNum){
	GPIO_Write(portNum,pinNum,HIGH);
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	0e 94 38 02 	call	0x470	; 0x470 <GPIO_Write>
 2fe:	08 95       	ret

00000300 <ledOff>:
}
void ledOff (uint8_t portNum, uint8_t pinNum){
	GPIO_Write(portNum,pinNum,LOW);
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	0e 94 38 02 	call	0x470	; 0x470 <GPIO_Write>
 306:	08 95       	ret

00000308 <ledToggle>:
}
void ledToggle (uint8_t portNum, uint8_t pinNum){
	GPIO_Toggle(portNum,pinNum);
 308:	0e 94 d5 02 	call	0x5aa	; 0x5aa <GPIO_Toggle>
 30c:	08 95       	ret

0000030e <isLedOn>:
}
uint8_t isLedOn (uint8_t portNum, uint8_t pinNum){
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	1f 92       	push	r1
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
	uint8_t result;
	GPIO_Read(portNum,pinNum,&result);
 318:	ae 01       	movw	r20, r28
 31a:	4f 5f       	subi	r20, 0xFF	; 255
 31c:	5f 4f       	sbci	r21, 0xFF	; 255
 31e:	0e 94 0c 03 	call	0x618	; 0x618 <GPIO_Read>
	return result;
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	0f 90       	pop	r0
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <main>:
#include "ECUAL/LED/led.h"
#include "MCAL/Timers/timer.h"
#include"util/delay.h"
int main(void)
{
	appInitilization();
 32c:	0e 94 49 00 	call	0x92	; 0x92 <appInitilization>
	
    /* Replace with your application code */
    while (1) 
    {
		
	appStart();
 330:	0e 94 91 00 	call	0x122	; 0x122 <appStart>
 334:	fd cf       	rjmp	.-6      	; 0x330 <main+0x4>

00000336 <GPIO_init>:
 */ 
#include"gpio.h"

//global variables
void GPIO_init(uint8_t portNum, uint8_t pinNum, uint8_t dir){
	switch(portNum){
 336:	82 34       	cpi	r24, 0x42	; 66
 338:	79 f1       	breq	.+94     	; 0x398 <GPIO_init+0x62>
 33a:	18 f4       	brcc	.+6      	; 0x342 <GPIO_init+0xc>
 33c:	81 34       	cpi	r24, 0x41	; 65
 33e:	41 f0       	breq	.+16     	; 0x350 <GPIO_init+0x1a>
 340:	08 95       	ret
 342:	83 34       	cpi	r24, 0x43	; 67
 344:	09 f4       	brne	.+2      	; 0x348 <GPIO_init+0x12>
 346:	4c c0       	rjmp	.+152    	; 0x3e0 <GPIO_init+0xaa>
 348:	84 34       	cpi	r24, 0x44	; 68
 34a:	09 f4       	brne	.+2      	; 0x34e <GPIO_init+0x18>
 34c:	6d c0       	rjmp	.+218    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 34e:	08 95       	ret
		case PortA:
		if(dir == IN){
 350:	41 11       	cpse	r20, r1
 352:	0c c0       	rjmp	.+24     	; 0x36c <GPIO_init+0x36>
			DDRA &= (~(1<<pinNum)); 
 354:	2a b3       	in	r18, 0x1a	; 26
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <GPIO_init+0x2a>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <GPIO_init+0x26>
 364:	80 95       	com	r24
 366:	82 23       	and	r24, r18
 368:	8a bb       	out	0x1a, r24	; 26
 36a:	08 95       	ret
		}
		else if (dir == OUT){
 36c:	41 30       	cpi	r20, 0x01	; 1
 36e:	59 f4       	brne	.+22     	; 0x386 <GPIO_init+0x50>
			DDRA |= (1<<pinNum);
 370:	2a b3       	in	r18, 0x1a	; 26
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <GPIO_init+0x46>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <GPIO_init+0x42>
 380:	82 2b       	or	r24, r18
 382:	8a bb       	out	0x1a, r24	; 26
 384:	08 95       	ret
		}
		else {
			printf("Error direction");
 386:	80 e6       	ldi	r24, 0x60	; 96
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	9f 93       	push	r25
 38c:	8f 93       	push	r24
 38e:	0e 94 99 03 	call	0x732	; 0x732 <printf>
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	08 95       	ret
		}
		break;
		
		case PortB:
		if(dir == IN){
 398:	41 11       	cpse	r20, r1
 39a:	0c c0       	rjmp	.+24     	; 0x3b4 <GPIO_init+0x7e>
			DDRB &= (~(1<<pinNum));
 39c:	27 b3       	in	r18, 0x17	; 23
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <GPIO_init+0x72>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <GPIO_init+0x6e>
 3ac:	80 95       	com	r24
 3ae:	82 23       	and	r24, r18
 3b0:	87 bb       	out	0x17, r24	; 23
 3b2:	08 95       	ret
		}
		else if (dir == OUT){
 3b4:	41 30       	cpi	r20, 0x01	; 1
 3b6:	59 f4       	brne	.+22     	; 0x3ce <GPIO_init+0x98>
			DDRB |= (1<<pinNum);
 3b8:	27 b3       	in	r18, 0x17	; 23
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <GPIO_init+0x8e>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <GPIO_init+0x8a>
 3c8:	82 2b       	or	r24, r18
 3ca:	87 bb       	out	0x17, r24	; 23
 3cc:	08 95       	ret
		}
		else {
			printf("Error direction");
 3ce:	80 e6       	ldi	r24, 0x60	; 96
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	9f 93       	push	r25
 3d4:	8f 93       	push	r24
 3d6:	0e 94 99 03 	call	0x732	; 0x732 <printf>
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	08 95       	ret
		}
		break;
		
		case PortC:
		if(dir == IN){
 3e0:	41 11       	cpse	r20, r1
 3e2:	0c c0       	rjmp	.+24     	; 0x3fc <GPIO_init+0xc6>
			DDRC &= (~(1<<pinNum));
 3e4:	24 b3       	in	r18, 0x14	; 20
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <GPIO_init+0xba>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <GPIO_init+0xb6>
 3f4:	80 95       	com	r24
 3f6:	82 23       	and	r24, r18
 3f8:	84 bb       	out	0x14, r24	; 20
 3fa:	08 95       	ret
		}
		else if (dir == OUT){
 3fc:	41 30       	cpi	r20, 0x01	; 1
 3fe:	59 f4       	brne	.+22     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			DDRC |= (1<<pinNum);
 400:	24 b3       	in	r18, 0x14	; 20
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	82 2b       	or	r24, r18
 412:	84 bb       	out	0x14, r24	; 20
 414:	08 95       	ret
		}
		else {
			printf("Error direction");
 416:	80 e6       	ldi	r24, 0x60	; 96
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	9f 93       	push	r25
 41c:	8f 93       	push	r24
 41e:	0e 94 99 03 	call	0x732	; 0x732 <printf>
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	08 95       	ret
		}
		break;
		
		case PortD:
		if(dir == IN){
 428:	41 11       	cpse	r20, r1
 42a:	0c c0       	rjmp	.+24     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			DDRD &= (~(1<<pinNum));
 42c:	21 b3       	in	r18, 0x11	; 17
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	80 95       	com	r24
 43e:	82 23       	and	r24, r18
 440:	81 bb       	out	0x11, r24	; 17
 442:	08 95       	ret
		}
		else if (dir == OUT){
 444:	41 30       	cpi	r20, 0x01	; 1
 446:	59 f4       	brne	.+22     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			DDRD |= (1<<pinNum);
 448:	21 b3       	in	r18, 0x11	; 17
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 458:	82 2b       	or	r24, r18
 45a:	81 bb       	out	0x11, r24	; 17
 45c:	08 95       	ret
		}
		else {
			printf("Error direction");
 45e:	80 e6       	ldi	r24, 0x60	; 96
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	9f 93       	push	r25
 464:	8f 93       	push	r24
 466:	0e 94 99 03 	call	0x732	; 0x732 <printf>
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	08 95       	ret

00000470 <GPIO_Write>:
		}
		break; 
	}
}
void GPIO_Write(uint8_t portNum, uint8_t pinNum, uint8_t value){
	switch(portNum){
 470:	82 34       	cpi	r24, 0x42	; 66
 472:	79 f1       	breq	.+94     	; 0x4d2 <GPIO_Write+0x62>
 474:	18 f4       	brcc	.+6      	; 0x47c <GPIO_Write+0xc>
 476:	81 34       	cpi	r24, 0x41	; 65
 478:	41 f0       	breq	.+16     	; 0x48a <GPIO_Write+0x1a>
 47a:	08 95       	ret
 47c:	83 34       	cpi	r24, 0x43	; 67
 47e:	09 f4       	brne	.+2      	; 0x482 <GPIO_Write+0x12>
 480:	4c c0       	rjmp	.+152    	; 0x51a <GPIO_Write+0xaa>
 482:	84 34       	cpi	r24, 0x44	; 68
 484:	09 f4       	brne	.+2      	; 0x488 <GPIO_Write+0x18>
 486:	6d c0       	rjmp	.+218    	; 0x562 <GPIO_Write+0xf2>
 488:	08 95       	ret
		case PortA:
		if(value == LOW){
 48a:	41 11       	cpse	r20, r1
 48c:	0c c0       	rjmp	.+24     	; 0x4a6 <GPIO_Write+0x36>
			PORTA &= (~(1<<pinNum));
 48e:	2b b3       	in	r18, 0x1b	; 27
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <GPIO_Write+0x2a>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <GPIO_Write+0x26>
 49e:	80 95       	com	r24
 4a0:	82 23       	and	r24, r18
 4a2:	8b bb       	out	0x1b, r24	; 27
 4a4:	08 95       	ret
		}
		else if (value == HIGH){
 4a6:	41 30       	cpi	r20, 0x01	; 1
 4a8:	59 f4       	brne	.+22     	; 0x4c0 <GPIO_Write+0x50>
			PORTA |= (1<<pinNum);
 4aa:	2b b3       	in	r18, 0x1b	; 27
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <GPIO_Write+0x46>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	6a 95       	dec	r22
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <GPIO_Write+0x42>
 4ba:	82 2b       	or	r24, r18
 4bc:	8b bb       	out	0x1b, r24	; 27
 4be:	08 95       	ret
		}
		else {
			printf("Error value");
 4c0:	80 e7       	ldi	r24, 0x70	; 112
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	9f 93       	push	r25
 4c6:	8f 93       	push	r24
 4c8:	0e 94 99 03 	call	0x732	; 0x732 <printf>
 4cc:	0f 90       	pop	r0
 4ce:	0f 90       	pop	r0
 4d0:	08 95       	ret
		}
		break;
		
		case PortB:
		if(value == LOW){
 4d2:	41 11       	cpse	r20, r1
 4d4:	0c c0       	rjmp	.+24     	; 0x4ee <GPIO_Write+0x7e>
			PORTB &= (~(1<<pinNum));
 4d6:	28 b3       	in	r18, 0x18	; 24
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <GPIO_Write+0x72>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <GPIO_Write+0x6e>
 4e6:	80 95       	com	r24
 4e8:	82 23       	and	r24, r18
 4ea:	88 bb       	out	0x18, r24	; 24
 4ec:	08 95       	ret
		}
		else if (value == HIGH){
 4ee:	41 30       	cpi	r20, 0x01	; 1
 4f0:	59 f4       	brne	.+22     	; 0x508 <GPIO_Write+0x98>
			PORTB |= (1<<pinNum);
 4f2:	28 b3       	in	r18, 0x18	; 24
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <GPIO_Write+0x8e>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	6a 95       	dec	r22
 500:	e2 f7       	brpl	.-8      	; 0x4fa <GPIO_Write+0x8a>
 502:	82 2b       	or	r24, r18
 504:	88 bb       	out	0x18, r24	; 24
 506:	08 95       	ret
		}
		else {
			printf("Error value");
 508:	80 e7       	ldi	r24, 0x70	; 112
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	9f 93       	push	r25
 50e:	8f 93       	push	r24
 510:	0e 94 99 03 	call	0x732	; 0x732 <printf>
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
 518:	08 95       	ret
		}
		break;
		
		case PortC:
		if(value == LOW){
 51a:	41 11       	cpse	r20, r1
 51c:	0c c0       	rjmp	.+24     	; 0x536 <GPIO_Write+0xc6>
			PORTC &= (~(1<<pinNum));
 51e:	25 b3       	in	r18, 0x15	; 21
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <GPIO_Write+0xba>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <GPIO_Write+0xb6>
 52e:	80 95       	com	r24
 530:	82 23       	and	r24, r18
 532:	85 bb       	out	0x15, r24	; 21
 534:	08 95       	ret
		}
		else if (value == HIGH){
 536:	41 30       	cpi	r20, 0x01	; 1
 538:	59 f4       	brne	.+22     	; 0x550 <GPIO_Write+0xe0>
			PORTC |= (1<<pinNum);
 53a:	25 b3       	in	r18, 0x15	; 21
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <GPIO_Write+0xd6>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	6a 95       	dec	r22
 548:	e2 f7       	brpl	.-8      	; 0x542 <GPIO_Write+0xd2>
 54a:	82 2b       	or	r24, r18
 54c:	85 bb       	out	0x15, r24	; 21
 54e:	08 95       	ret
		}
		else {
			printf("Error value");
 550:	80 e7       	ldi	r24, 0x70	; 112
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	9f 93       	push	r25
 556:	8f 93       	push	r24
 558:	0e 94 99 03 	call	0x732	; 0x732 <printf>
 55c:	0f 90       	pop	r0
 55e:	0f 90       	pop	r0
 560:	08 95       	ret
		}
		break;
		
		case PortD:
		if(value == LOW){
 562:	41 11       	cpse	r20, r1
 564:	0c c0       	rjmp	.+24     	; 0x57e <GPIO_Write+0x10e>
			PORTD &= (~(1<<pinNum));
 566:	22 b3       	in	r18, 0x12	; 18
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <GPIO_Write+0x102>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <GPIO_Write+0xfe>
 576:	80 95       	com	r24
 578:	82 23       	and	r24, r18
 57a:	82 bb       	out	0x12, r24	; 18
 57c:	08 95       	ret
		}
		else if (value == HIGH){
 57e:	41 30       	cpi	r20, 0x01	; 1
 580:	59 f4       	brne	.+22     	; 0x598 <GPIO_Write+0x128>
			PORTD |= (1<<pinNum);
 582:	22 b3       	in	r18, 0x12	; 18
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <GPIO_Write+0x11e>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	6a 95       	dec	r22
 590:	e2 f7       	brpl	.-8      	; 0x58a <GPIO_Write+0x11a>
 592:	82 2b       	or	r24, r18
 594:	82 bb       	out	0x12, r24	; 18
 596:	08 95       	ret
		}
		else {
			printf("Error value");
 598:	80 e7       	ldi	r24, 0x70	; 112
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	9f 93       	push	r25
 59e:	8f 93       	push	r24
 5a0:	0e 94 99 03 	call	0x732	; 0x732 <printf>
 5a4:	0f 90       	pop	r0
 5a6:	0f 90       	pop	r0
 5a8:	08 95       	ret

000005aa <GPIO_Toggle>:
	}
	
}

void GPIO_Toggle(uint8_t portNum, uint8_t pinNum){
	switch (portNum){
 5aa:	82 34       	cpi	r24, 0x42	; 66
 5ac:	a1 f0       	breq	.+40     	; 0x5d6 <GPIO_Toggle+0x2c>
 5ae:	18 f4       	brcc	.+6      	; 0x5b6 <GPIO_Toggle+0xc>
 5b0:	81 34       	cpi	r24, 0x41	; 65
 5b2:	31 f0       	breq	.+12     	; 0x5c0 <GPIO_Toggle+0x16>
 5b4:	08 95       	ret
 5b6:	83 34       	cpi	r24, 0x43	; 67
 5b8:	c9 f0       	breq	.+50     	; 0x5ec <GPIO_Toggle+0x42>
 5ba:	84 34       	cpi	r24, 0x44	; 68
 5bc:	11 f1       	breq	.+68     	; 0x602 <GPIO_Toggle+0x58>
 5be:	08 95       	ret
		case PortA:
		PORTA ^= 1<< pinNum;
 5c0:	2b b3       	in	r18, 0x1b	; 27
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <GPIO_Toggle+0x22>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <GPIO_Toggle+0x1e>
 5d0:	82 27       	eor	r24, r18
 5d2:	8b bb       	out	0x1b, r24	; 27
		break;
 5d4:	08 95       	ret
		
		case PortB:
		PORTB ^= 1<< pinNum;
 5d6:	28 b3       	in	r18, 0x18	; 24
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <GPIO_Toggle+0x38>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <GPIO_Toggle+0x34>
 5e6:	82 27       	eor	r24, r18
 5e8:	88 bb       	out	0x18, r24	; 24
		break;
 5ea:	08 95       	ret
		
		case PortC:
		PORTC ^= 1<< pinNum;
 5ec:	25 b3       	in	r18, 0x15	; 21
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <GPIO_Toggle+0x4e>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	6a 95       	dec	r22
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <GPIO_Toggle+0x4a>
 5fc:	82 27       	eor	r24, r18
 5fe:	85 bb       	out	0x15, r24	; 21
		break;
 600:	08 95       	ret
		
		case PortD:
		PORTD ^= 1<< pinNum;
 602:	22 b3       	in	r18, 0x12	; 18
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <GPIO_Toggle+0x64>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	6a 95       	dec	r22
 610:	e2 f7       	brpl	.-8      	; 0x60a <GPIO_Toggle+0x60>
 612:	82 27       	eor	r24, r18
 614:	82 bb       	out	0x12, r24	; 18
 616:	08 95       	ret

00000618 <GPIO_Read>:
		break;
	}
}
void GPIO_Read (uint8_t portNum, uint8_t pinNum, uint8_t * value){
	switch(portNum){
 618:	82 34       	cpi	r24, 0x42	; 66
 61a:	01 f1       	breq	.+64     	; 0x65c <GPIO_Read+0x44>
 61c:	18 f4       	brcc	.+6      	; 0x624 <GPIO_Read+0xc>
 61e:	81 34       	cpi	r24, 0x41	; 65
 620:	39 f0       	breq	.+14     	; 0x630 <GPIO_Read+0x18>
 622:	08 95       	ret
 624:	83 34       	cpi	r24, 0x43	; 67
 626:	81 f1       	breq	.+96     	; 0x688 <GPIO_Read+0x70>
 628:	84 34       	cpi	r24, 0x44	; 68
 62a:	09 f4       	brne	.+2      	; 0x62e <GPIO_Read+0x16>
 62c:	43 c0       	rjmp	.+134    	; 0x6b4 <GPIO_Read+0x9c>
 62e:	08 95       	ret
		case PortA:
		*value = (( PINA &(1<< pinNum) ) >> pinNum);
 630:	79 b3       	in	r23, 0x19	; 25
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	9c 01       	movw	r18, r24
 638:	06 2e       	mov	r0, r22
 63a:	02 c0       	rjmp	.+4      	; 0x640 <GPIO_Read+0x28>
 63c:	22 0f       	add	r18, r18
 63e:	33 1f       	adc	r19, r19
 640:	0a 94       	dec	r0
 642:	e2 f7       	brpl	.-8      	; 0x63c <GPIO_Read+0x24>
 644:	87 2f       	mov	r24, r23
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	82 23       	and	r24, r18
 64a:	93 23       	and	r25, r19
 64c:	02 c0       	rjmp	.+4      	; 0x652 <GPIO_Read+0x3a>
 64e:	95 95       	asr	r25
 650:	87 95       	ror	r24
 652:	6a 95       	dec	r22
 654:	e2 f7       	brpl	.-8      	; 0x64e <GPIO_Read+0x36>
 656:	fa 01       	movw	r30, r20
 658:	80 83       	st	Z, r24
		break;
 65a:	08 95       	ret
		
		case PortB:
		*value = (( PINB &(1<< pinNum) ) >> pinNum);
 65c:	76 b3       	in	r23, 0x16	; 22
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	9c 01       	movw	r18, r24
 664:	06 2e       	mov	r0, r22
 666:	02 c0       	rjmp	.+4      	; 0x66c <GPIO_Read+0x54>
 668:	22 0f       	add	r18, r18
 66a:	33 1f       	adc	r19, r19
 66c:	0a 94       	dec	r0
 66e:	e2 f7       	brpl	.-8      	; 0x668 <GPIO_Read+0x50>
 670:	87 2f       	mov	r24, r23
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	82 23       	and	r24, r18
 676:	93 23       	and	r25, r19
 678:	02 c0       	rjmp	.+4      	; 0x67e <GPIO_Read+0x66>
 67a:	95 95       	asr	r25
 67c:	87 95       	ror	r24
 67e:	6a 95       	dec	r22
 680:	e2 f7       	brpl	.-8      	; 0x67a <GPIO_Read+0x62>
 682:	fa 01       	movw	r30, r20
 684:	80 83       	st	Z, r24
		break;
 686:	08 95       	ret
		
		case PortC:
		*value = (( PINC &(1<< pinNum) ) >> pinNum);
 688:	73 b3       	in	r23, 0x13	; 19
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	9c 01       	movw	r18, r24
 690:	06 2e       	mov	r0, r22
 692:	02 c0       	rjmp	.+4      	; 0x698 <GPIO_Read+0x80>
 694:	22 0f       	add	r18, r18
 696:	33 1f       	adc	r19, r19
 698:	0a 94       	dec	r0
 69a:	e2 f7       	brpl	.-8      	; 0x694 <GPIO_Read+0x7c>
 69c:	87 2f       	mov	r24, r23
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	82 23       	and	r24, r18
 6a2:	93 23       	and	r25, r19
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <GPIO_Read+0x92>
 6a6:	95 95       	asr	r25
 6a8:	87 95       	ror	r24
 6aa:	6a 95       	dec	r22
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <GPIO_Read+0x8e>
 6ae:	fa 01       	movw	r30, r20
 6b0:	80 83       	st	Z, r24
		break;
 6b2:	08 95       	ret
		
		case PortD:
		*value = (( PIND &(1<< pinNum) ) >> pinNum);
 6b4:	70 b3       	in	r23, 0x10	; 16
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	9c 01       	movw	r18, r24
 6bc:	06 2e       	mov	r0, r22
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <GPIO_Read+0xac>
 6c0:	22 0f       	add	r18, r18
 6c2:	33 1f       	adc	r19, r19
 6c4:	0a 94       	dec	r0
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <GPIO_Read+0xa8>
 6c8:	87 2f       	mov	r24, r23
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	82 23       	and	r24, r18
 6ce:	93 23       	and	r25, r19
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <GPIO_Read+0xbe>
 6d2:	95 95       	asr	r25
 6d4:	87 95       	ror	r24
 6d6:	6a 95       	dec	r22
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <GPIO_Read+0xba>
 6da:	fa 01       	movw	r30, r20
 6dc:	80 83       	st	Z, r24
 6de:	08 95       	ret

000006e0 <INT0_init>:
 */

#include "interrupt.h"

void INT0_init(){
	 sei();
 6e0:	78 94       	sei
	 MCUCR |= (1<<ISC00) | (1<<ISC01);
 6e2:	85 b7       	in	r24, 0x35	; 53
 6e4:	83 60       	ori	r24, 0x03	; 3
 6e6:	85 bf       	out	0x35, r24	; 53
	 GICR |= (1<<INT0);
 6e8:	8b b7       	in	r24, 0x3b	; 59
 6ea:	80 64       	ori	r24, 0x40	; 64
 6ec:	8b bf       	out	0x3b, r24	; 59
 6ee:	08 95       	ret

000006f0 <timerDelay>:
	}
	counter =0;
}

void timerStop(void){
	TCCR0 = 0x00;
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	07 c0       	rjmp	.+14     	; 0x702 <timerDelay+0x12>
 6f4:	08 b6       	in	r0, 0x38	; 56
 6f6:	00 fe       	sbrs	r0, 0
 6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <timerDelay+0x4>
 6fa:	88 b7       	in	r24, 0x38	; 56
 6fc:	81 60       	ori	r24, 0x01	; 1
 6fe:	88 bf       	out	0x38, r24	; 56
 700:	9f 5f       	subi	r25, 0xFF	; 255
 702:	94 31       	cpi	r25, 0x14	; 20
 704:	b8 f3       	brcs	.-18     	; 0x6f4 <timerDelay+0x4>
 706:	08 95       	ret

00000708 <timerStart>:
}

void timerStart(void){
    TCCR0  |= 1<<CS00 | 1<<CS02 ;
 708:	83 b7       	in	r24, 0x33	; 51
 70a:	85 60       	ori	r24, 0x05	; 5
 70c:	83 bf       	out	0x33, r24	; 51
 70e:	08 95       	ret

00000710 <timerInitialization>:
}

void timerInitialization (void){
	TCCR0 &= (~ ( (1<<WGM00) | (1<<WGM01) ));
 710:	83 b7       	in	r24, 0x33	; 51
 712:	87 7b       	andi	r24, 0xB7	; 183
 714:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
 716:	12 be       	out	0x32, r1	; 50
 718:	08 95       	ret

0000071a <timerDelayBlink>:
}
void timerDelayBlink(){
	uint8_t counter=0;
 71a:	90 e0       	ldi	r25, 0x00	; 0
	while(counter < Blinking){
 71c:	07 c0       	rjmp	.+14     	; 0x72c <timerDelayBlink+0x12>
		while ( (TIFR & (1<<0)) == 0);
 71e:	08 b6       	in	r0, 0x38	; 56
 720:	00 fe       	sbrs	r0, 0
 722:	fd cf       	rjmp	.-6      	; 0x71e <timerDelayBlink+0x4>
		TIFR |= 1<<0;
 724:	88 b7       	in	r24, 0x38	; 56
 726:	81 60       	ori	r24, 0x01	; 1
 728:	88 bf       	out	0x38, r24	; 56
		counter ++;
 72a:	9f 5f       	subi	r25, 0xFF	; 255
	TCCR0 &= (~ ( (1<<WGM00) | (1<<WGM01) ));
	TCNT0 = 0x00;
}
void timerDelayBlink(){
	uint8_t counter=0;
	while(counter < Blinking){
 72c:	93 30       	cpi	r25, 0x03	; 3
 72e:	b8 f3       	brcs	.-18     	; 0x71e <timerDelayBlink+0x4>
		while ( (TIFR & (1<<0)) == 0);
		TIFR |= 1<<0;
		counter ++;
	}
	counter =0;
}
 730:	08 95       	ret

00000732 <printf>:
 732:	a0 e0       	ldi	r26, 0x00	; 0
 734:	b0 e0       	ldi	r27, 0x00	; 0
 736:	ef e9       	ldi	r30, 0x9F	; 159
 738:	f3 e0       	ldi	r31, 0x03	; 3
 73a:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__prologue_saves__+0x20>
 73e:	ae 01       	movw	r20, r28
 740:	4b 5f       	subi	r20, 0xFB	; 251
 742:	5f 4f       	sbci	r21, 0xFF	; 255
 744:	fa 01       	movw	r30, r20
 746:	61 91       	ld	r22, Z+
 748:	71 91       	ld	r23, Z+
 74a:	af 01       	movw	r20, r30
 74c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__iob+0x2>
 750:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__iob+0x3>
 754:	0e 94 af 03 	call	0x75e	; 0x75e <vfprintf>
 758:	e2 e0       	ldi	r30, 0x02	; 2
 75a:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__epilogue_restores__+0x20>

0000075e <vfprintf>:
 75e:	ab e0       	ldi	r26, 0x0B	; 11
 760:	b0 e0       	ldi	r27, 0x00	; 0
 762:	e5 eb       	ldi	r30, 0xB5	; 181
 764:	f3 e0       	ldi	r31, 0x03	; 3
 766:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__prologue_saves__>
 76a:	6c 01       	movw	r12, r24
 76c:	7b 01       	movw	r14, r22
 76e:	8a 01       	movw	r16, r20
 770:	fc 01       	movw	r30, r24
 772:	17 82       	std	Z+7, r1	; 0x07
 774:	16 82       	std	Z+6, r1	; 0x06
 776:	83 81       	ldd	r24, Z+3	; 0x03
 778:	81 ff       	sbrs	r24, 1
 77a:	cc c1       	rjmp	.+920    	; 0xb14 <__stack+0x2b5>
 77c:	ce 01       	movw	r24, r28
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	3c 01       	movw	r6, r24
 782:	f6 01       	movw	r30, r12
 784:	93 81       	ldd	r25, Z+3	; 0x03
 786:	f7 01       	movw	r30, r14
 788:	93 fd       	sbrc	r25, 3
 78a:	85 91       	lpm	r24, Z+
 78c:	93 ff       	sbrs	r25, 3
 78e:	81 91       	ld	r24, Z+
 790:	7f 01       	movw	r14, r30
 792:	88 23       	and	r24, r24
 794:	09 f4       	brne	.+2      	; 0x798 <vfprintf+0x3a>
 796:	ba c1       	rjmp	.+884    	; 0xb0c <__stack+0x2ad>
 798:	85 32       	cpi	r24, 0x25	; 37
 79a:	39 f4       	brne	.+14     	; 0x7aa <vfprintf+0x4c>
 79c:	93 fd       	sbrc	r25, 3
 79e:	85 91       	lpm	r24, Z+
 7a0:	93 ff       	sbrs	r25, 3
 7a2:	81 91       	ld	r24, Z+
 7a4:	7f 01       	movw	r14, r30
 7a6:	85 32       	cpi	r24, 0x25	; 37
 7a8:	29 f4       	brne	.+10     	; 0x7b4 <vfprintf+0x56>
 7aa:	b6 01       	movw	r22, r12
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 7b2:	e7 cf       	rjmp	.-50     	; 0x782 <vfprintf+0x24>
 7b4:	91 2c       	mov	r9, r1
 7b6:	21 2c       	mov	r2, r1
 7b8:	31 2c       	mov	r3, r1
 7ba:	ff e1       	ldi	r31, 0x1F	; 31
 7bc:	f3 15       	cp	r31, r3
 7be:	d8 f0       	brcs	.+54     	; 0x7f6 <vfprintf+0x98>
 7c0:	8b 32       	cpi	r24, 0x2B	; 43
 7c2:	79 f0       	breq	.+30     	; 0x7e2 <vfprintf+0x84>
 7c4:	38 f4       	brcc	.+14     	; 0x7d4 <vfprintf+0x76>
 7c6:	80 32       	cpi	r24, 0x20	; 32
 7c8:	79 f0       	breq	.+30     	; 0x7e8 <vfprintf+0x8a>
 7ca:	83 32       	cpi	r24, 0x23	; 35
 7cc:	a1 f4       	brne	.+40     	; 0x7f6 <vfprintf+0x98>
 7ce:	23 2d       	mov	r18, r3
 7d0:	20 61       	ori	r18, 0x10	; 16
 7d2:	1d c0       	rjmp	.+58     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7d4:	8d 32       	cpi	r24, 0x2D	; 45
 7d6:	61 f0       	breq	.+24     	; 0x7f0 <vfprintf+0x92>
 7d8:	80 33       	cpi	r24, 0x30	; 48
 7da:	69 f4       	brne	.+26     	; 0x7f6 <vfprintf+0x98>
 7dc:	23 2d       	mov	r18, r3
 7de:	21 60       	ori	r18, 0x01	; 1
 7e0:	16 c0       	rjmp	.+44     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7e2:	83 2d       	mov	r24, r3
 7e4:	82 60       	ori	r24, 0x02	; 2
 7e6:	38 2e       	mov	r3, r24
 7e8:	e3 2d       	mov	r30, r3
 7ea:	e4 60       	ori	r30, 0x04	; 4
 7ec:	3e 2e       	mov	r3, r30
 7ee:	2a c0       	rjmp	.+84     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 7f0:	f3 2d       	mov	r31, r3
 7f2:	f8 60       	ori	r31, 0x08	; 8
 7f4:	1d c0       	rjmp	.+58     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 7f6:	37 fc       	sbrc	r3, 7
 7f8:	2d c0       	rjmp	.+90     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 7fa:	20 ed       	ldi	r18, 0xD0	; 208
 7fc:	28 0f       	add	r18, r24
 7fe:	2a 30       	cpi	r18, 0x0A	; 10
 800:	40 f0       	brcs	.+16     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 802:	8e 32       	cpi	r24, 0x2E	; 46
 804:	b9 f4       	brne	.+46     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 806:	36 fc       	sbrc	r3, 6
 808:	81 c1       	rjmp	.+770    	; 0xb0c <__stack+0x2ad>
 80a:	23 2d       	mov	r18, r3
 80c:	20 64       	ori	r18, 0x40	; 64
 80e:	32 2e       	mov	r3, r18
 810:	19 c0       	rjmp	.+50     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 812:	36 fe       	sbrs	r3, 6
 814:	06 c0       	rjmp	.+12     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 816:	8a e0       	ldi	r24, 0x0A	; 10
 818:	98 9e       	mul	r9, r24
 81a:	20 0d       	add	r18, r0
 81c:	11 24       	eor	r1, r1
 81e:	92 2e       	mov	r9, r18
 820:	11 c0       	rjmp	.+34     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 822:	ea e0       	ldi	r30, 0x0A	; 10
 824:	2e 9e       	mul	r2, r30
 826:	20 0d       	add	r18, r0
 828:	11 24       	eor	r1, r1
 82a:	22 2e       	mov	r2, r18
 82c:	f3 2d       	mov	r31, r3
 82e:	f0 62       	ori	r31, 0x20	; 32
 830:	3f 2e       	mov	r3, r31
 832:	08 c0       	rjmp	.+16     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 834:	8c 36       	cpi	r24, 0x6C	; 108
 836:	21 f4       	brne	.+8      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 838:	83 2d       	mov	r24, r3
 83a:	80 68       	ori	r24, 0x80	; 128
 83c:	38 2e       	mov	r3, r24
 83e:	02 c0       	rjmp	.+4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 840:	88 36       	cpi	r24, 0x68	; 104
 842:	41 f4       	brne	.+16     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 844:	f7 01       	movw	r30, r14
 846:	93 fd       	sbrc	r25, 3
 848:	85 91       	lpm	r24, Z+
 84a:	93 ff       	sbrs	r25, 3
 84c:	81 91       	ld	r24, Z+
 84e:	7f 01       	movw	r14, r30
 850:	81 11       	cpse	r24, r1
 852:	b3 cf       	rjmp	.-154    	; 0x7ba <vfprintf+0x5c>
 854:	98 2f       	mov	r25, r24
 856:	9f 7d       	andi	r25, 0xDF	; 223
 858:	95 54       	subi	r25, 0x45	; 69
 85a:	93 30       	cpi	r25, 0x03	; 3
 85c:	28 f4       	brcc	.+10     	; 0x868 <__stack+0x9>
 85e:	0c 5f       	subi	r16, 0xFC	; 252
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	9f e3       	ldi	r25, 0x3F	; 63
 864:	99 83       	std	Y+1, r25	; 0x01
 866:	0d c0       	rjmp	.+26     	; 0x882 <__stack+0x23>
 868:	83 36       	cpi	r24, 0x63	; 99
 86a:	31 f0       	breq	.+12     	; 0x878 <__stack+0x19>
 86c:	83 37       	cpi	r24, 0x73	; 115
 86e:	71 f0       	breq	.+28     	; 0x88c <__stack+0x2d>
 870:	83 35       	cpi	r24, 0x53	; 83
 872:	09 f0       	breq	.+2      	; 0x876 <__stack+0x17>
 874:	59 c0       	rjmp	.+178    	; 0x928 <__stack+0xc9>
 876:	21 c0       	rjmp	.+66     	; 0x8ba <__stack+0x5b>
 878:	f8 01       	movw	r30, r16
 87a:	80 81       	ld	r24, Z
 87c:	89 83       	std	Y+1, r24	; 0x01
 87e:	0e 5f       	subi	r16, 0xFE	; 254
 880:	1f 4f       	sbci	r17, 0xFF	; 255
 882:	88 24       	eor	r8, r8
 884:	83 94       	inc	r8
 886:	91 2c       	mov	r9, r1
 888:	53 01       	movw	r10, r6
 88a:	13 c0       	rjmp	.+38     	; 0x8b2 <__stack+0x53>
 88c:	28 01       	movw	r4, r16
 88e:	f2 e0       	ldi	r31, 0x02	; 2
 890:	4f 0e       	add	r4, r31
 892:	51 1c       	adc	r5, r1
 894:	f8 01       	movw	r30, r16
 896:	a0 80       	ld	r10, Z
 898:	b1 80       	ldd	r11, Z+1	; 0x01
 89a:	36 fe       	sbrs	r3, 6
 89c:	03 c0       	rjmp	.+6      	; 0x8a4 <__stack+0x45>
 89e:	69 2d       	mov	r22, r9
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
 8a4:	6f ef       	ldi	r22, 0xFF	; 255
 8a6:	7f ef       	ldi	r23, 0xFF	; 255
 8a8:	c5 01       	movw	r24, r10
 8aa:	0e 94 9b 05 	call	0xb36	; 0xb36 <strnlen>
 8ae:	4c 01       	movw	r8, r24
 8b0:	82 01       	movw	r16, r4
 8b2:	f3 2d       	mov	r31, r3
 8b4:	ff 77       	andi	r31, 0x7F	; 127
 8b6:	3f 2e       	mov	r3, r31
 8b8:	16 c0       	rjmp	.+44     	; 0x8e6 <__stack+0x87>
 8ba:	28 01       	movw	r4, r16
 8bc:	22 e0       	ldi	r18, 0x02	; 2
 8be:	42 0e       	add	r4, r18
 8c0:	51 1c       	adc	r5, r1
 8c2:	f8 01       	movw	r30, r16
 8c4:	a0 80       	ld	r10, Z
 8c6:	b1 80       	ldd	r11, Z+1	; 0x01
 8c8:	36 fe       	sbrs	r3, 6
 8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <__stack+0x73>
 8cc:	69 2d       	mov	r22, r9
 8ce:	70 e0       	ldi	r23, 0x00	; 0
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__stack+0x77>
 8d2:	6f ef       	ldi	r22, 0xFF	; 255
 8d4:	7f ef       	ldi	r23, 0xFF	; 255
 8d6:	c5 01       	movw	r24, r10
 8d8:	0e 94 90 05 	call	0xb20	; 0xb20 <strnlen_P>
 8dc:	4c 01       	movw	r8, r24
 8de:	f3 2d       	mov	r31, r3
 8e0:	f0 68       	ori	r31, 0x80	; 128
 8e2:	3f 2e       	mov	r3, r31
 8e4:	82 01       	movw	r16, r4
 8e6:	33 fc       	sbrc	r3, 3
 8e8:	1b c0       	rjmp	.+54     	; 0x920 <__stack+0xc1>
 8ea:	82 2d       	mov	r24, r2
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	88 16       	cp	r8, r24
 8f0:	99 06       	cpc	r9, r25
 8f2:	b0 f4       	brcc	.+44     	; 0x920 <__stack+0xc1>
 8f4:	b6 01       	movw	r22, r12
 8f6:	80 e2       	ldi	r24, 0x20	; 32
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 8fe:	2a 94       	dec	r2
 900:	f4 cf       	rjmp	.-24     	; 0x8ea <__stack+0x8b>
 902:	f5 01       	movw	r30, r10
 904:	37 fc       	sbrc	r3, 7
 906:	85 91       	lpm	r24, Z+
 908:	37 fe       	sbrs	r3, 7
 90a:	81 91       	ld	r24, Z+
 90c:	5f 01       	movw	r10, r30
 90e:	b6 01       	movw	r22, r12
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 916:	21 10       	cpse	r2, r1
 918:	2a 94       	dec	r2
 91a:	21 e0       	ldi	r18, 0x01	; 1
 91c:	82 1a       	sub	r8, r18
 91e:	91 08       	sbc	r9, r1
 920:	81 14       	cp	r8, r1
 922:	91 04       	cpc	r9, r1
 924:	71 f7       	brne	.-36     	; 0x902 <__stack+0xa3>
 926:	e8 c0       	rjmp	.+464    	; 0xaf8 <__stack+0x299>
 928:	84 36       	cpi	r24, 0x64	; 100
 92a:	11 f0       	breq	.+4      	; 0x930 <__stack+0xd1>
 92c:	89 36       	cpi	r24, 0x69	; 105
 92e:	41 f5       	brne	.+80     	; 0x980 <__stack+0x121>
 930:	f8 01       	movw	r30, r16
 932:	37 fe       	sbrs	r3, 7
 934:	07 c0       	rjmp	.+14     	; 0x944 <__stack+0xe5>
 936:	60 81       	ld	r22, Z
 938:	71 81       	ldd	r23, Z+1	; 0x01
 93a:	82 81       	ldd	r24, Z+2	; 0x02
 93c:	93 81       	ldd	r25, Z+3	; 0x03
 93e:	0c 5f       	subi	r16, 0xFC	; 252
 940:	1f 4f       	sbci	r17, 0xFF	; 255
 942:	08 c0       	rjmp	.+16     	; 0x954 <__stack+0xf5>
 944:	60 81       	ld	r22, Z
 946:	71 81       	ldd	r23, Z+1	; 0x01
 948:	07 2e       	mov	r0, r23
 94a:	00 0c       	add	r0, r0
 94c:	88 0b       	sbc	r24, r24
 94e:	99 0b       	sbc	r25, r25
 950:	0e 5f       	subi	r16, 0xFE	; 254
 952:	1f 4f       	sbci	r17, 0xFF	; 255
 954:	f3 2d       	mov	r31, r3
 956:	ff 76       	andi	r31, 0x6F	; 111
 958:	3f 2e       	mov	r3, r31
 95a:	97 ff       	sbrs	r25, 7
 95c:	09 c0       	rjmp	.+18     	; 0x970 <__stack+0x111>
 95e:	90 95       	com	r25
 960:	80 95       	com	r24
 962:	70 95       	com	r23
 964:	61 95       	neg	r22
 966:	7f 4f       	sbci	r23, 0xFF	; 255
 968:	8f 4f       	sbci	r24, 0xFF	; 255
 96a:	9f 4f       	sbci	r25, 0xFF	; 255
 96c:	f0 68       	ori	r31, 0x80	; 128
 96e:	3f 2e       	mov	r3, r31
 970:	2a e0       	ldi	r18, 0x0A	; 10
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	a3 01       	movw	r20, r6
 976:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__ultoa_invert>
 97a:	88 2e       	mov	r8, r24
 97c:	86 18       	sub	r8, r6
 97e:	45 c0       	rjmp	.+138    	; 0xa0a <__stack+0x1ab>
 980:	85 37       	cpi	r24, 0x75	; 117
 982:	31 f4       	brne	.+12     	; 0x990 <__stack+0x131>
 984:	23 2d       	mov	r18, r3
 986:	2f 7e       	andi	r18, 0xEF	; 239
 988:	b2 2e       	mov	r11, r18
 98a:	2a e0       	ldi	r18, 0x0A	; 10
 98c:	30 e0       	ldi	r19, 0x00	; 0
 98e:	25 c0       	rjmp	.+74     	; 0x9da <__stack+0x17b>
 990:	93 2d       	mov	r25, r3
 992:	99 7f       	andi	r25, 0xF9	; 249
 994:	b9 2e       	mov	r11, r25
 996:	8f 36       	cpi	r24, 0x6F	; 111
 998:	c1 f0       	breq	.+48     	; 0x9ca <__stack+0x16b>
 99a:	18 f4       	brcc	.+6      	; 0x9a2 <__stack+0x143>
 99c:	88 35       	cpi	r24, 0x58	; 88
 99e:	79 f0       	breq	.+30     	; 0x9be <__stack+0x15f>
 9a0:	b5 c0       	rjmp	.+362    	; 0xb0c <__stack+0x2ad>
 9a2:	80 37       	cpi	r24, 0x70	; 112
 9a4:	19 f0       	breq	.+6      	; 0x9ac <__stack+0x14d>
 9a6:	88 37       	cpi	r24, 0x78	; 120
 9a8:	21 f0       	breq	.+8      	; 0x9b2 <__stack+0x153>
 9aa:	b0 c0       	rjmp	.+352    	; 0xb0c <__stack+0x2ad>
 9ac:	e9 2f       	mov	r30, r25
 9ae:	e0 61       	ori	r30, 0x10	; 16
 9b0:	be 2e       	mov	r11, r30
 9b2:	b4 fe       	sbrs	r11, 4
 9b4:	0d c0       	rjmp	.+26     	; 0x9d0 <__stack+0x171>
 9b6:	fb 2d       	mov	r31, r11
 9b8:	f4 60       	ori	r31, 0x04	; 4
 9ba:	bf 2e       	mov	r11, r31
 9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <__stack+0x171>
 9be:	34 fe       	sbrs	r3, 4
 9c0:	0a c0       	rjmp	.+20     	; 0x9d6 <__stack+0x177>
 9c2:	29 2f       	mov	r18, r25
 9c4:	26 60       	ori	r18, 0x06	; 6
 9c6:	b2 2e       	mov	r11, r18
 9c8:	06 c0       	rjmp	.+12     	; 0x9d6 <__stack+0x177>
 9ca:	28 e0       	ldi	r18, 0x08	; 8
 9cc:	30 e0       	ldi	r19, 0x00	; 0
 9ce:	05 c0       	rjmp	.+10     	; 0x9da <__stack+0x17b>
 9d0:	20 e1       	ldi	r18, 0x10	; 16
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <__stack+0x17b>
 9d6:	20 e1       	ldi	r18, 0x10	; 16
 9d8:	32 e0       	ldi	r19, 0x02	; 2
 9da:	f8 01       	movw	r30, r16
 9dc:	b7 fe       	sbrs	r11, 7
 9de:	07 c0       	rjmp	.+14     	; 0x9ee <__stack+0x18f>
 9e0:	60 81       	ld	r22, Z
 9e2:	71 81       	ldd	r23, Z+1	; 0x01
 9e4:	82 81       	ldd	r24, Z+2	; 0x02
 9e6:	93 81       	ldd	r25, Z+3	; 0x03
 9e8:	0c 5f       	subi	r16, 0xFC	; 252
 9ea:	1f 4f       	sbci	r17, 0xFF	; 255
 9ec:	06 c0       	rjmp	.+12     	; 0x9fa <__stack+0x19b>
 9ee:	60 81       	ld	r22, Z
 9f0:	71 81       	ldd	r23, Z+1	; 0x01
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 5f       	subi	r16, 0xFE	; 254
 9f8:	1f 4f       	sbci	r17, 0xFF	; 255
 9fa:	a3 01       	movw	r20, r6
 9fc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__ultoa_invert>
 a00:	88 2e       	mov	r8, r24
 a02:	86 18       	sub	r8, r6
 a04:	fb 2d       	mov	r31, r11
 a06:	ff 77       	andi	r31, 0x7F	; 127
 a08:	3f 2e       	mov	r3, r31
 a0a:	36 fe       	sbrs	r3, 6
 a0c:	0d c0       	rjmp	.+26     	; 0xa28 <__stack+0x1c9>
 a0e:	23 2d       	mov	r18, r3
 a10:	2e 7f       	andi	r18, 0xFE	; 254
 a12:	a2 2e       	mov	r10, r18
 a14:	89 14       	cp	r8, r9
 a16:	58 f4       	brcc	.+22     	; 0xa2e <__stack+0x1cf>
 a18:	34 fe       	sbrs	r3, 4
 a1a:	0b c0       	rjmp	.+22     	; 0xa32 <__stack+0x1d3>
 a1c:	32 fc       	sbrc	r3, 2
 a1e:	09 c0       	rjmp	.+18     	; 0xa32 <__stack+0x1d3>
 a20:	83 2d       	mov	r24, r3
 a22:	8e 7e       	andi	r24, 0xEE	; 238
 a24:	a8 2e       	mov	r10, r24
 a26:	05 c0       	rjmp	.+10     	; 0xa32 <__stack+0x1d3>
 a28:	b8 2c       	mov	r11, r8
 a2a:	a3 2c       	mov	r10, r3
 a2c:	03 c0       	rjmp	.+6      	; 0xa34 <__stack+0x1d5>
 a2e:	b8 2c       	mov	r11, r8
 a30:	01 c0       	rjmp	.+2      	; 0xa34 <__stack+0x1d5>
 a32:	b9 2c       	mov	r11, r9
 a34:	a4 fe       	sbrs	r10, 4
 a36:	0f c0       	rjmp	.+30     	; 0xa56 <__stack+0x1f7>
 a38:	fe 01       	movw	r30, r28
 a3a:	e8 0d       	add	r30, r8
 a3c:	f1 1d       	adc	r31, r1
 a3e:	80 81       	ld	r24, Z
 a40:	80 33       	cpi	r24, 0x30	; 48
 a42:	21 f4       	brne	.+8      	; 0xa4c <__stack+0x1ed>
 a44:	9a 2d       	mov	r25, r10
 a46:	99 7e       	andi	r25, 0xE9	; 233
 a48:	a9 2e       	mov	r10, r25
 a4a:	09 c0       	rjmp	.+18     	; 0xa5e <__stack+0x1ff>
 a4c:	a2 fe       	sbrs	r10, 2
 a4e:	06 c0       	rjmp	.+12     	; 0xa5c <__stack+0x1fd>
 a50:	b3 94       	inc	r11
 a52:	b3 94       	inc	r11
 a54:	04 c0       	rjmp	.+8      	; 0xa5e <__stack+0x1ff>
 a56:	8a 2d       	mov	r24, r10
 a58:	86 78       	andi	r24, 0x86	; 134
 a5a:	09 f0       	breq	.+2      	; 0xa5e <__stack+0x1ff>
 a5c:	b3 94       	inc	r11
 a5e:	a3 fc       	sbrc	r10, 3
 a60:	11 c0       	rjmp	.+34     	; 0xa84 <__stack+0x225>
 a62:	a0 fe       	sbrs	r10, 0
 a64:	06 c0       	rjmp	.+12     	; 0xa72 <__stack+0x213>
 a66:	b2 14       	cp	r11, r2
 a68:	88 f4       	brcc	.+34     	; 0xa8c <__stack+0x22d>
 a6a:	28 0c       	add	r2, r8
 a6c:	92 2c       	mov	r9, r2
 a6e:	9b 18       	sub	r9, r11
 a70:	0e c0       	rjmp	.+28     	; 0xa8e <__stack+0x22f>
 a72:	b2 14       	cp	r11, r2
 a74:	60 f4       	brcc	.+24     	; 0xa8e <__stack+0x22f>
 a76:	b6 01       	movw	r22, r12
 a78:	80 e2       	ldi	r24, 0x20	; 32
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 a80:	b3 94       	inc	r11
 a82:	f7 cf       	rjmp	.-18     	; 0xa72 <__stack+0x213>
 a84:	b2 14       	cp	r11, r2
 a86:	18 f4       	brcc	.+6      	; 0xa8e <__stack+0x22f>
 a88:	2b 18       	sub	r2, r11
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <__stack+0x231>
 a8c:	98 2c       	mov	r9, r8
 a8e:	21 2c       	mov	r2, r1
 a90:	a4 fe       	sbrs	r10, 4
 a92:	10 c0       	rjmp	.+32     	; 0xab4 <__stack+0x255>
 a94:	b6 01       	movw	r22, r12
 a96:	80 e3       	ldi	r24, 0x30	; 48
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 a9e:	a2 fe       	sbrs	r10, 2
 aa0:	17 c0       	rjmp	.+46     	; 0xad0 <__stack+0x271>
 aa2:	a1 fc       	sbrc	r10, 1
 aa4:	03 c0       	rjmp	.+6      	; 0xaac <__stack+0x24d>
 aa6:	88 e7       	ldi	r24, 0x78	; 120
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <__stack+0x251>
 aac:	88 e5       	ldi	r24, 0x58	; 88
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	b6 01       	movw	r22, r12
 ab2:	0c c0       	rjmp	.+24     	; 0xacc <__stack+0x26d>
 ab4:	8a 2d       	mov	r24, r10
 ab6:	86 78       	andi	r24, 0x86	; 134
 ab8:	59 f0       	breq	.+22     	; 0xad0 <__stack+0x271>
 aba:	a1 fe       	sbrs	r10, 1
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <__stack+0x263>
 abe:	8b e2       	ldi	r24, 0x2B	; 43
 ac0:	01 c0       	rjmp	.+2      	; 0xac4 <__stack+0x265>
 ac2:	80 e2       	ldi	r24, 0x20	; 32
 ac4:	a7 fc       	sbrc	r10, 7
 ac6:	8d e2       	ldi	r24, 0x2D	; 45
 ac8:	b6 01       	movw	r22, r12
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 ad0:	89 14       	cp	r8, r9
 ad2:	38 f4       	brcc	.+14     	; 0xae2 <__stack+0x283>
 ad4:	b6 01       	movw	r22, r12
 ad6:	80 e3       	ldi	r24, 0x30	; 48
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 ade:	9a 94       	dec	r9
 ae0:	f7 cf       	rjmp	.-18     	; 0xad0 <__stack+0x271>
 ae2:	8a 94       	dec	r8
 ae4:	f3 01       	movw	r30, r6
 ae6:	e8 0d       	add	r30, r8
 ae8:	f1 1d       	adc	r31, r1
 aea:	80 81       	ld	r24, Z
 aec:	b6 01       	movw	r22, r12
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 af4:	81 10       	cpse	r8, r1
 af6:	f5 cf       	rjmp	.-22     	; 0xae2 <__stack+0x283>
 af8:	22 20       	and	r2, r2
 afa:	09 f4       	brne	.+2      	; 0xafe <__stack+0x29f>
 afc:	42 ce       	rjmp	.-892    	; 0x782 <vfprintf+0x24>
 afe:	b6 01       	movw	r22, r12
 b00:	80 e2       	ldi	r24, 0x20	; 32
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 b08:	2a 94       	dec	r2
 b0a:	f6 cf       	rjmp	.-20     	; 0xaf8 <__stack+0x299>
 b0c:	f6 01       	movw	r30, r12
 b0e:	86 81       	ldd	r24, Z+6	; 0x06
 b10:	97 81       	ldd	r25, Z+7	; 0x07
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <__stack+0x2b9>
 b14:	8f ef       	ldi	r24, 0xFF	; 255
 b16:	9f ef       	ldi	r25, 0xFF	; 255
 b18:	2b 96       	adiw	r28, 0x0b	; 11
 b1a:	e2 e1       	ldi	r30, 0x12	; 18
 b1c:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__epilogue_restores__>

00000b20 <strnlen_P>:
 b20:	fc 01       	movw	r30, r24
 b22:	05 90       	lpm	r0, Z+
 b24:	61 50       	subi	r22, 0x01	; 1
 b26:	70 40       	sbci	r23, 0x00	; 0
 b28:	01 10       	cpse	r0, r1
 b2a:	d8 f7       	brcc	.-10     	; 0xb22 <strnlen_P+0x2>
 b2c:	80 95       	com	r24
 b2e:	90 95       	com	r25
 b30:	8e 0f       	add	r24, r30
 b32:	9f 1f       	adc	r25, r31
 b34:	08 95       	ret

00000b36 <strnlen>:
 b36:	fc 01       	movw	r30, r24
 b38:	61 50       	subi	r22, 0x01	; 1
 b3a:	70 40       	sbci	r23, 0x00	; 0
 b3c:	01 90       	ld	r0, Z+
 b3e:	01 10       	cpse	r0, r1
 b40:	d8 f7       	brcc	.-10     	; 0xb38 <strnlen+0x2>
 b42:	80 95       	com	r24
 b44:	90 95       	com	r25
 b46:	8e 0f       	add	r24, r30
 b48:	9f 1f       	adc	r25, r31
 b4a:	08 95       	ret

00000b4c <fputc>:
 b4c:	0f 93       	push	r16
 b4e:	1f 93       	push	r17
 b50:	cf 93       	push	r28
 b52:	df 93       	push	r29
 b54:	fb 01       	movw	r30, r22
 b56:	23 81       	ldd	r18, Z+3	; 0x03
 b58:	21 fd       	sbrc	r18, 1
 b5a:	03 c0       	rjmp	.+6      	; 0xb62 <fputc+0x16>
 b5c:	8f ef       	ldi	r24, 0xFF	; 255
 b5e:	9f ef       	ldi	r25, 0xFF	; 255
 b60:	2c c0       	rjmp	.+88     	; 0xbba <fputc+0x6e>
 b62:	22 ff       	sbrs	r18, 2
 b64:	16 c0       	rjmp	.+44     	; 0xb92 <fputc+0x46>
 b66:	46 81       	ldd	r20, Z+6	; 0x06
 b68:	57 81       	ldd	r21, Z+7	; 0x07
 b6a:	24 81       	ldd	r18, Z+4	; 0x04
 b6c:	35 81       	ldd	r19, Z+5	; 0x05
 b6e:	42 17       	cp	r20, r18
 b70:	53 07       	cpc	r21, r19
 b72:	44 f4       	brge	.+16     	; 0xb84 <fputc+0x38>
 b74:	a0 81       	ld	r26, Z
 b76:	b1 81       	ldd	r27, Z+1	; 0x01
 b78:	9d 01       	movw	r18, r26
 b7a:	2f 5f       	subi	r18, 0xFF	; 255
 b7c:	3f 4f       	sbci	r19, 0xFF	; 255
 b7e:	31 83       	std	Z+1, r19	; 0x01
 b80:	20 83       	st	Z, r18
 b82:	8c 93       	st	X, r24
 b84:	26 81       	ldd	r18, Z+6	; 0x06
 b86:	37 81       	ldd	r19, Z+7	; 0x07
 b88:	2f 5f       	subi	r18, 0xFF	; 255
 b8a:	3f 4f       	sbci	r19, 0xFF	; 255
 b8c:	37 83       	std	Z+7, r19	; 0x07
 b8e:	26 83       	std	Z+6, r18	; 0x06
 b90:	14 c0       	rjmp	.+40     	; 0xbba <fputc+0x6e>
 b92:	8b 01       	movw	r16, r22
 b94:	ec 01       	movw	r28, r24
 b96:	fb 01       	movw	r30, r22
 b98:	00 84       	ldd	r0, Z+8	; 0x08
 b9a:	f1 85       	ldd	r31, Z+9	; 0x09
 b9c:	e0 2d       	mov	r30, r0
 b9e:	09 95       	icall
 ba0:	89 2b       	or	r24, r25
 ba2:	e1 f6       	brne	.-72     	; 0xb5c <fputc+0x10>
 ba4:	d8 01       	movw	r26, r16
 ba6:	16 96       	adiw	r26, 0x06	; 6
 ba8:	8d 91       	ld	r24, X+
 baa:	9c 91       	ld	r25, X
 bac:	17 97       	sbiw	r26, 0x07	; 7
 bae:	01 96       	adiw	r24, 0x01	; 1
 bb0:	17 96       	adiw	r26, 0x07	; 7
 bb2:	9c 93       	st	X, r25
 bb4:	8e 93       	st	-X, r24
 bb6:	16 97       	sbiw	r26, 0x06	; 6
 bb8:	ce 01       	movw	r24, r28
 bba:	df 91       	pop	r29
 bbc:	cf 91       	pop	r28
 bbe:	1f 91       	pop	r17
 bc0:	0f 91       	pop	r16
 bc2:	08 95       	ret

00000bc4 <__ultoa_invert>:
 bc4:	fa 01       	movw	r30, r20
 bc6:	aa 27       	eor	r26, r26
 bc8:	28 30       	cpi	r18, 0x08	; 8
 bca:	51 f1       	breq	.+84     	; 0xc20 <__ultoa_invert+0x5c>
 bcc:	20 31       	cpi	r18, 0x10	; 16
 bce:	81 f1       	breq	.+96     	; 0xc30 <__ultoa_invert+0x6c>
 bd0:	e8 94       	clt
 bd2:	6f 93       	push	r22
 bd4:	6e 7f       	andi	r22, 0xFE	; 254
 bd6:	6e 5f       	subi	r22, 0xFE	; 254
 bd8:	7f 4f       	sbci	r23, 0xFF	; 255
 bda:	8f 4f       	sbci	r24, 0xFF	; 255
 bdc:	9f 4f       	sbci	r25, 0xFF	; 255
 bde:	af 4f       	sbci	r26, 0xFF	; 255
 be0:	b1 e0       	ldi	r27, 0x01	; 1
 be2:	3e d0       	rcall	.+124    	; 0xc60 <__ultoa_invert+0x9c>
 be4:	b4 e0       	ldi	r27, 0x04	; 4
 be6:	3c d0       	rcall	.+120    	; 0xc60 <__ultoa_invert+0x9c>
 be8:	67 0f       	add	r22, r23
 bea:	78 1f       	adc	r23, r24
 bec:	89 1f       	adc	r24, r25
 bee:	9a 1f       	adc	r25, r26
 bf0:	a1 1d       	adc	r26, r1
 bf2:	68 0f       	add	r22, r24
 bf4:	79 1f       	adc	r23, r25
 bf6:	8a 1f       	adc	r24, r26
 bf8:	91 1d       	adc	r25, r1
 bfa:	a1 1d       	adc	r26, r1
 bfc:	6a 0f       	add	r22, r26
 bfe:	71 1d       	adc	r23, r1
 c00:	81 1d       	adc	r24, r1
 c02:	91 1d       	adc	r25, r1
 c04:	a1 1d       	adc	r26, r1
 c06:	20 d0       	rcall	.+64     	; 0xc48 <__ultoa_invert+0x84>
 c08:	09 f4       	brne	.+2      	; 0xc0c <__ultoa_invert+0x48>
 c0a:	68 94       	set
 c0c:	3f 91       	pop	r19
 c0e:	2a e0       	ldi	r18, 0x0A	; 10
 c10:	26 9f       	mul	r18, r22
 c12:	11 24       	eor	r1, r1
 c14:	30 19       	sub	r19, r0
 c16:	30 5d       	subi	r19, 0xD0	; 208
 c18:	31 93       	st	Z+, r19
 c1a:	de f6       	brtc	.-74     	; 0xbd2 <__ultoa_invert+0xe>
 c1c:	cf 01       	movw	r24, r30
 c1e:	08 95       	ret
 c20:	46 2f       	mov	r20, r22
 c22:	47 70       	andi	r20, 0x07	; 7
 c24:	40 5d       	subi	r20, 0xD0	; 208
 c26:	41 93       	st	Z+, r20
 c28:	b3 e0       	ldi	r27, 0x03	; 3
 c2a:	0f d0       	rcall	.+30     	; 0xc4a <__ultoa_invert+0x86>
 c2c:	c9 f7       	brne	.-14     	; 0xc20 <__ultoa_invert+0x5c>
 c2e:	f6 cf       	rjmp	.-20     	; 0xc1c <__ultoa_invert+0x58>
 c30:	46 2f       	mov	r20, r22
 c32:	4f 70       	andi	r20, 0x0F	; 15
 c34:	40 5d       	subi	r20, 0xD0	; 208
 c36:	4a 33       	cpi	r20, 0x3A	; 58
 c38:	18 f0       	brcs	.+6      	; 0xc40 <__ultoa_invert+0x7c>
 c3a:	49 5d       	subi	r20, 0xD9	; 217
 c3c:	31 fd       	sbrc	r19, 1
 c3e:	40 52       	subi	r20, 0x20	; 32
 c40:	41 93       	st	Z+, r20
 c42:	02 d0       	rcall	.+4      	; 0xc48 <__ultoa_invert+0x84>
 c44:	a9 f7       	brne	.-22     	; 0xc30 <__ultoa_invert+0x6c>
 c46:	ea cf       	rjmp	.-44     	; 0xc1c <__ultoa_invert+0x58>
 c48:	b4 e0       	ldi	r27, 0x04	; 4
 c4a:	a6 95       	lsr	r26
 c4c:	97 95       	ror	r25
 c4e:	87 95       	ror	r24
 c50:	77 95       	ror	r23
 c52:	67 95       	ror	r22
 c54:	ba 95       	dec	r27
 c56:	c9 f7       	brne	.-14     	; 0xc4a <__ultoa_invert+0x86>
 c58:	00 97       	sbiw	r24, 0x00	; 0
 c5a:	61 05       	cpc	r22, r1
 c5c:	71 05       	cpc	r23, r1
 c5e:	08 95       	ret
 c60:	9b 01       	movw	r18, r22
 c62:	ac 01       	movw	r20, r24
 c64:	0a 2e       	mov	r0, r26
 c66:	06 94       	lsr	r0
 c68:	57 95       	ror	r21
 c6a:	47 95       	ror	r20
 c6c:	37 95       	ror	r19
 c6e:	27 95       	ror	r18
 c70:	ba 95       	dec	r27
 c72:	c9 f7       	brne	.-14     	; 0xc66 <__ultoa_invert+0xa2>
 c74:	62 0f       	add	r22, r18
 c76:	73 1f       	adc	r23, r19
 c78:	84 1f       	adc	r24, r20
 c7a:	95 1f       	adc	r25, r21
 c7c:	a0 1d       	adc	r26, r0
 c7e:	08 95       	ret

00000c80 <__prologue_saves__>:
 c80:	2f 92       	push	r2
 c82:	3f 92       	push	r3
 c84:	4f 92       	push	r4
 c86:	5f 92       	push	r5
 c88:	6f 92       	push	r6
 c8a:	7f 92       	push	r7
 c8c:	8f 92       	push	r8
 c8e:	9f 92       	push	r9
 c90:	af 92       	push	r10
 c92:	bf 92       	push	r11
 c94:	cf 92       	push	r12
 c96:	df 92       	push	r13
 c98:	ef 92       	push	r14
 c9a:	ff 92       	push	r15
 c9c:	0f 93       	push	r16
 c9e:	1f 93       	push	r17
 ca0:	cf 93       	push	r28
 ca2:	df 93       	push	r29
 ca4:	cd b7       	in	r28, 0x3d	; 61
 ca6:	de b7       	in	r29, 0x3e	; 62
 ca8:	ca 1b       	sub	r28, r26
 caa:	db 0b       	sbc	r29, r27
 cac:	0f b6       	in	r0, 0x3f	; 63
 cae:	f8 94       	cli
 cb0:	de bf       	out	0x3e, r29	; 62
 cb2:	0f be       	out	0x3f, r0	; 63
 cb4:	cd bf       	out	0x3d, r28	; 61
 cb6:	09 94       	ijmp

00000cb8 <__epilogue_restores__>:
 cb8:	2a 88       	ldd	r2, Y+18	; 0x12
 cba:	39 88       	ldd	r3, Y+17	; 0x11
 cbc:	48 88       	ldd	r4, Y+16	; 0x10
 cbe:	5f 84       	ldd	r5, Y+15	; 0x0f
 cc0:	6e 84       	ldd	r6, Y+14	; 0x0e
 cc2:	7d 84       	ldd	r7, Y+13	; 0x0d
 cc4:	8c 84       	ldd	r8, Y+12	; 0x0c
 cc6:	9b 84       	ldd	r9, Y+11	; 0x0b
 cc8:	aa 84       	ldd	r10, Y+10	; 0x0a
 cca:	b9 84       	ldd	r11, Y+9	; 0x09
 ccc:	c8 84       	ldd	r12, Y+8	; 0x08
 cce:	df 80       	ldd	r13, Y+7	; 0x07
 cd0:	ee 80       	ldd	r14, Y+6	; 0x06
 cd2:	fd 80       	ldd	r15, Y+5	; 0x05
 cd4:	0c 81       	ldd	r16, Y+4	; 0x04
 cd6:	1b 81       	ldd	r17, Y+3	; 0x03
 cd8:	aa 81       	ldd	r26, Y+2	; 0x02
 cda:	b9 81       	ldd	r27, Y+1	; 0x01
 cdc:	ce 0f       	add	r28, r30
 cde:	d1 1d       	adc	r29, r1
 ce0:	0f b6       	in	r0, 0x3f	; 63
 ce2:	f8 94       	cli
 ce4:	de bf       	out	0x3e, r29	; 62
 ce6:	0f be       	out	0x3f, r0	; 63
 ce8:	cd bf       	out	0x3d, r28	; 61
 cea:	ed 01       	movw	r28, r26
 cec:	08 95       	ret

00000cee <_exit>:
 cee:	f8 94       	cli

00000cf0 <__stop_program>:
 cf0:	ff cf       	rjmp	.-2      	; 0xcf0 <__stop_program>
